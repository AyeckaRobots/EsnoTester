# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import board_pb2 as board__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from google.protobuf import wrappers_pb2 as google_dot_protobuf_dot_wrappers__pb2
import mdc_pb2 as mdc__pb2

GRPC_GENERATED_VERSION = '1.70.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in mdc_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class MDCServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ResetDevice = channel.unary_unary(
                '/mdc.board.MDCService/ResetDevice',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=board__pb2.Result.FromString,
                _registered_method=True)
        self.ResetBoard = channel.unary_unary(
                '/mdc.board.MDCService/ResetBoard',
                request_serializer=mdc__pb2.ResetMessage.SerializeToString,
                response_deserializer=board__pb2.Result.FromString,
                _registered_method=True)
        self.GetBoardInfo = channel.unary_unary(
                '/mdc.board.MDCService/GetBoardInfo',
                request_serializer=google_dot_protobuf_dot_wrappers__pb2.Int32Value.SerializeToString,
                response_deserializer=mdc__pb2.Board.FromString,
                _registered_method=True)
        self.ConfigureBoardChannel = channel.unary_unary(
                '/mdc.board.MDCService/ConfigureBoardChannel',
                request_serializer=mdc__pb2.BoardChannelConfiguration.SerializeToString,
                response_deserializer=board__pb2.Result.FromString,
                _registered_method=True)
        self.ConfigureNetworking = channel.unary_unary(
                '/mdc.board.MDCService/ConfigureNetworking',
                request_serializer=mdc__pb2.Networking.SerializeToString,
                response_deserializer=board__pb2.Result.FromString,
                _registered_method=True)
        self.GetLockInfo = channel.unary_unary(
                '/mdc.board.MDCService/GetLockInfo',
                request_serializer=mdc__pb2.BoardChannel.SerializeToString,
                response_deserializer=board__pb2.LockReport.FromString,
                _registered_method=True)
        self.GetPeriodicReport = channel.unary_unary(
                '/mdc.board.MDCService/GetPeriodicReport',
                request_serializer=mdc__pb2.BoardChannel.SerializeToString,
                response_deserializer=board__pb2.PeriodicReport.FromString,
                _registered_method=True)
        self.GetBoardChannelCnr = channel.unary_unary(
                '/mdc.board.MDCService/GetBoardChannelCnr',
                request_serializer=mdc__pb2.BoardChannel.SerializeToString,
                response_deserializer=board__pb2.Cnr.FromString,
                _registered_method=True)
        self.GetChannelConfiguration = channel.unary_unary(
                '/mdc.board.MDCService/GetChannelConfiguration',
                request_serializer=mdc__pb2.BoardChannel.SerializeToString,
                response_deserializer=mdc__pb2.BoardChannelConfiguration.FromString,
                _registered_method=True)


class MDCServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ResetDevice(self, request, context):
        """reset device
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ResetBoard(self, request, context):
        """reset board
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBoardInfo(self, request, context):
        """Board info
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigureBoardChannel(self, request, context):
        """configuration of one channel
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigureNetworking(self, request, context):
        """networking configuration (device's public IP, etc.)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLockInfo(self, request, context):
        """get specific board channel lock info
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPeriodicReport(self, request, context):
        """get specific board channel periodic report
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBoardChannelCnr(self, request, context):
        """get specific board channel periodic report
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetChannelConfiguration(self, request, context):
        """get specific channel configuration
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MDCServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ResetDevice': grpc.unary_unary_rpc_method_handler(
                    servicer.ResetDevice,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=board__pb2.Result.SerializeToString,
            ),
            'ResetBoard': grpc.unary_unary_rpc_method_handler(
                    servicer.ResetBoard,
                    request_deserializer=mdc__pb2.ResetMessage.FromString,
                    response_serializer=board__pb2.Result.SerializeToString,
            ),
            'GetBoardInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBoardInfo,
                    request_deserializer=google_dot_protobuf_dot_wrappers__pb2.Int32Value.FromString,
                    response_serializer=mdc__pb2.Board.SerializeToString,
            ),
            'ConfigureBoardChannel': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigureBoardChannel,
                    request_deserializer=mdc__pb2.BoardChannelConfiguration.FromString,
                    response_serializer=board__pb2.Result.SerializeToString,
            ),
            'ConfigureNetworking': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigureNetworking,
                    request_deserializer=mdc__pb2.Networking.FromString,
                    response_serializer=board__pb2.Result.SerializeToString,
            ),
            'GetLockInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLockInfo,
                    request_deserializer=mdc__pb2.BoardChannel.FromString,
                    response_serializer=board__pb2.LockReport.SerializeToString,
            ),
            'GetPeriodicReport': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPeriodicReport,
                    request_deserializer=mdc__pb2.BoardChannel.FromString,
                    response_serializer=board__pb2.PeriodicReport.SerializeToString,
            ),
            'GetBoardChannelCnr': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBoardChannelCnr,
                    request_deserializer=mdc__pb2.BoardChannel.FromString,
                    response_serializer=board__pb2.Cnr.SerializeToString,
            ),
            'GetChannelConfiguration': grpc.unary_unary_rpc_method_handler(
                    servicer.GetChannelConfiguration,
                    request_deserializer=mdc__pb2.BoardChannel.FromString,
                    response_serializer=mdc__pb2.BoardChannelConfiguration.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mdc.board.MDCService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('mdc.board.MDCService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MDCService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ResetDevice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mdc.board.MDCService/ResetDevice',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            board__pb2.Result.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ResetBoard(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mdc.board.MDCService/ResetBoard',
            mdc__pb2.ResetMessage.SerializeToString,
            board__pb2.Result.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetBoardInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mdc.board.MDCService/GetBoardInfo',
            google_dot_protobuf_dot_wrappers__pb2.Int32Value.SerializeToString,
            mdc__pb2.Board.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ConfigureBoardChannel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mdc.board.MDCService/ConfigureBoardChannel',
            mdc__pb2.BoardChannelConfiguration.SerializeToString,
            board__pb2.Result.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ConfigureNetworking(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mdc.board.MDCService/ConfigureNetworking',
            mdc__pb2.Networking.SerializeToString,
            board__pb2.Result.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetLockInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mdc.board.MDCService/GetLockInfo',
            mdc__pb2.BoardChannel.SerializeToString,
            board__pb2.LockReport.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPeriodicReport(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mdc.board.MDCService/GetPeriodicReport',
            mdc__pb2.BoardChannel.SerializeToString,
            board__pb2.PeriodicReport.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetBoardChannelCnr(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mdc.board.MDCService/GetBoardChannelCnr',
            mdc__pb2.BoardChannel.SerializeToString,
            board__pb2.Cnr.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetChannelConfiguration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mdc.board.MDCService/GetChannelConfiguration',
            mdc__pb2.BoardChannel.SerializeToString,
            mdc__pb2.BoardChannelConfiguration.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
